
public class ActualJava_14 {
	
	int i = 4;
	
	public static void main(String[] args) {
		
		ActualJava_14 a1 = new ActualJava_14();
		ActualJava_14 a2 = new ActualJava_14();
		
		a2.i = 10;
		
		a1.add();
		a2.add();
	}	
	
	void add() {
		
		System.out.println("inside add() "+i);
	}
		
}


//public class ActualJava_14 {
//	
//	int i = 4;
//	
//	public static void main(String[] args) {
//		
//		ActualJava_14 a1 = new ActualJava_14();
//		
//		System.out.println(a1.i);
//		
//		a1.add();
//	}	
//	
//	void add() {
//		
//		System.out.println("inside add() "+i);//here I am trying to acces "i" which is the instance variable
//												//but not local variable yet no error displayed since behind the
//												//scene, it is "a1.i" since this add() is called upon 
//												//"a1" reference variable...
//	}
//		
//}


//public class ActualJava_14 {
//	
//	int firstNo = 4, secondNo = 5, result;
//	
//	
//	public static void main(String[] args) {
//		
//		ActualJava_14 a1 = new ActualJava_14();
//		
//		ActualJava_14 a2 = new ActualJava_14();
//		
//		a1.result = a1.firstNo + a1.secondNo;
//		System.out.println(a1.result);
//		
//		a2.result = a2.firstNo - a2.secondNo;
//		System.out.println(a2.result);
//	}	
//}



//public class ActualJava_14 {
//	
//	int firstNo = 4, secondNo = 5, result;
//	
//	
//	public static void main(String[] args) {
//		
//		ActualJava_14 a1 = new ActualJava_14();
//		
//		ActualJava_14 a2 = new ActualJava_14();
//		
//		System.out.println(a1.firstNo);
//		System.out.println(a1.secondNo);
//		System.out.println(a1.result);
//		System.out.println(a1);
//		
//		System.out.println(a2.firstNo);
//		System.out.println(a2.secondNo);
//		System.out.println(a2.result);
//		System.out.println(a2);
//	}	
//}



//public class ActualJava_14 {
//	
//	int firstNo = 4, secondNo = 5, result;//if you do not assign value to instance variable then default
//										//value is given on runtime. Here, "result" variable is of int
//										//type and int is given "0" as a default value..
//	
//	
//	public static void main(String[] args) {
//		
//		ActualJava_14 a1 = new ActualJava_14();//You can create any number of objects of any class..
//		ActualJava_14 a2 = new ActualJava_14();
//		//Here I have 2 objects in this program and both the objects have individual copies of instance
//		//variables...	
//	}	
//}


//public class ActualJava_14 {
//	
//	int firstNo = 4, secondNo = 5;
//	
//	
//	public static void main(String[] args) {
//		
//		ActualJava_14 a1 = new ActualJava_14();
//		
//		int result = a1.firstNo + a1.secondNo;//local variables are not given space on objects...
//		
//		System.out.println(result);
//	}	
//}


//public class ActualJava_14 {
//	
////	int firstNo = 4;
////	int secondNo = 5;
////	int result;
//	
//	int firstNo = 4, secondNo = 5, result;
//	
//	
//	public static void main(String[] args) {
//		
//		ActualJava_14 a1 = new ActualJava_14();
//		
//		a1.result = a1.firstNo + a1.secondNo;
//		
//		System.out.println(a1.result);
//	}	
//}


//public class ActualJava_14 {
//	
//	
//	public static void main(String[] args) {
//		
//		int firstNo = 4;
//		int secondNo = 5;
//		
//		int result = firstNo + secondNo;
//		
//		System.out.println(result);
//	}	
//}



//public class ActualJava_14 {
//	
//	int i = 4;//here "i and j" are object variable but the main term for object variable/s is instance variable or state...
//	int j = 5;
//	
//	public static void main(String[] args) {
//		
//		ActualJava_14 a1 = new ActualJava_14();//This statement is creating the object/instance of class "ActualJava_14"
//												//and keeps the address of the location in the reference variable
//												//which is "a1". So this object holds all the variables
//												//declared outside the method/s but inside the class...
//		
//		System.out.println(a1.i);
//		System.out.println(a1.j);
//		
//		System.out.println(a1);
//	}
//
//	
//}
